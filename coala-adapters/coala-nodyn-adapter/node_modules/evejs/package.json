{
  "name": "evejs",
  "author": {
    "name": "Alex de Mulder",
    "email": "alex almende org"
  },
  "description": "NodeJS platform for Eve agents",
  "version": "0.3.3",
  "repository": {
    "type": "git",
    "url": "https://github.com/AlexDM0/EVE-NodeJS"
  },
  "dependencies": {
    "ws": "latest"
  },
  "engines": {
    "node": "0.10.x"
  },
  "readme": "EveJS\r\n=========\r\n\r\n### Introduction\r\n\r\nEve is a multipurpose, web-based agent platform. Eve envisions to be an open and dynamic environment where agents can live and act anywhere: in the cloud, on smartphones, on desktops, in browsers, robots, home automation devices, and others. The agents communicate with each other using simple, existing protocols (JSON-RPC) over existing transport layers, offering a language and platform agnostic solution. \r\n\r\nEve has a library available in JavaScript, running on Node.js. This library provides a ready-made Node.js server and some example agents. Node.js runs JavaScript, which is a very natural language to handle JSON-RPC messages, as JSON is a subset of the JavaScript language.\r\n\r\nEve for nodeJS is available as an npm package called *evejs*.\r\n\r\n---\r\n\r\n### How to install\r\nYou can install EveJS for Node.js from npm:\r\n```\r\nnpm install evejs\r\n```\r\n\r\n---\r\n\r\n### EveJS Example\r\nThis is a small code example showing how initialize an Eve instance.\r\n```\r\nvar Eve = require('evejs');\r\n\r\nvar eveOptions = {\r\n  transports: [\r\n    {\r\n    protocol: \"http\",\r\n      options: {\r\n        port: 3000,\r\n        path: \"agents/\"\r\n      }\r\n    }\r\n  ],\r\n  agents: [\r\n    {agentClass: \"./agents/mathAgent\", name: \"mathAgent\"}, \r\n    ...\r\n  ],\r\n  agentModules: [\r\n      \"publishSubscribe\",\r\n      \"./agents/agentModules/myModule\"\r\n  ]\r\n};\r\n\r\nvar myEve = new Eve(eveOptions);\r\n```\r\nThe path of the agentClass is relative to the root of your project. That means that the \"agents\" folder is in the same folder as \"node_modules\".\r\n####EveJS options:\r\n name | type | description\r\n:--------|:-----|:-----------\r\ntransports|Array|Each object given to the transport array has to consist of a field called ```protocol```. This also needs to be present in the address as ```protocol://AgentName```. If a protocol is not defined in the address when sending a message, the message is automatically sent over the default transport. The default transport is local or the first transport defined: eveOptions.transports[0]. \r\nagents|Array|Each agent object given to the agents array has to contain the fields ```agentClass```, which is a path to where the agent's javascript module can be found and ```name```, the name of the agent as Eve will identify it.\r\n[agentModules]|Array|Optionally, agents can be extended with agentModules. Some modules, like ```publishSubscribe```, are provided by EveJS. Others can be created by the user. These modules extend the default built-in methods the agents can use.\r\n\r\n\r\n---\r\n### Transports\r\nEveJS currently supports two transport layers. These are stand-alone and determined by the address to which the message is sent.\r\n\r\n- **local** - Local transport is loaded by default for sending messages within the same Eve instance.\r\n\r\n```\r\noptions = {}; // the local transport layer has no options\r\n\r\nexample: \"local://agentName\"\r\n```\r\n\r\n- **http** - When http is selected, EveJS automatically creates a native Nodejs server to listen on a pre-/userdefined port. EveJS can be\r\nconfigured to send a message over the local transport if the agent is detected on the same instance to increase performance.\r\n\r\n```\r\noptions: {\r\n    port: 3000,\r\n    path: myAgents,\r\n    localShortcut: false\r\n};\r\n\r\nexample: \"http://127.0.0.1:3000/myAgents/agentName\"\r\n```\r\n\r\noption | type | default | description\r\n:--------|:-----|:--------|:-----------\r\nport|Number|3000|The port EveJS will listen on\r\npath|String|agents|The path after localhost (or 127.0.0.1)\r\nlocalShortcut|Boolean|false|When true, send message over local if possible\r\n\r\n\r\n- **default** - The first transport protocol that is given in the options will be the default transport protocol. If no transport protocol is defined in the options, the local protocol will be the default.\r\n\r\n```\r\nexample: \"agentName\" \r\n```\r\n---\r\n### JSON-RPC message structure\r\nBoth the local and http transport layers employ the JSON-RPC protocol. The messages in the JSON-RPC protocol are defined as shown below. The function name is the function the receiving agent will perform. Only functions in the this.RPCfunctions object of the agent can be called by other agents. \r\n\r\n```\r\nvar message = {\r\n    method: \"functionName\",\r\n    params: {}\r\n};\r\n\r\nvar reply = {\r\n    result: \"my result\",\r\n    error: 0\r\n};\r\n```\r\n\r\n---\r\n### Built-in methods of Agents\r\n\r\nThis is a list of the functions an EveJS agent can use.\r\n\r\n function | arguments | return | description\r\n:-------- |:-----|:--------|:-----------\r\nsend      | address, message, callback |  | send a message (reply) {console.log(reply.result);}```\r\nschedule  | function, time | id | Schedule a function to be performed after ```time``` ms.\r\nclearSchedule |  id |  | Remove a specific scheduled function.\r\nclearAllSchedules | |  | Remove all scheduled functions.\r\nrepeat    | function, timeInterval | id | Repeat a function after ```timeInterval``` (in ms), every ```timeInterval``` until stopped.\r\nstopRepeating | id |  | Stop repeating all specific repeating function.\r\nstopRepeatingAll |  |  | Stop repeating all repeating functions.\r\ndie | |  | Remove the agent.\r\n\r\n#### Usage examples\r\n```\r\nthis.send(\r\n        \"local://agentName\",                      // address\r\n        {method:\"add\",params:{a:49, b:23}},     // message\r\n        function(reply) {                       // callback\r\n            console.log(reply.result);\r\n        }\r\n);\r\n\r\nvar sID = this.schedule(\r\n            function () {console.log(\"do this in 5 minutes\");},   // function to perform after the timeout\r\n            5*60*1000                                               // timeout in milliseconds\r\n);\r\n\r\nthis.clearSchedule(sID);                        // do not perform the scheduled function defined by the \"sid\"\r\n\r\nvar rID = this.repeat(\r\n            function() {console.log(\"I'm repeating every 10s!\");},  // function to repeat with a timeout interval\r\n            10*1000                                                 // timeout interval in milliseconds\r\n);\r\n\r\nthis.stopRepeating(rID);                        // stop repeating the message\r\n\r\nthis.die();                                     // kill the agent\r\n```\r\n---\r\n### Agent Modules\r\n\r\nAgent modules can be used to expand the built-in methods the agents can use. These methods are added to all agents.\r\nThe modules themselves are quite simple, they contain a function that requires an agent object, add functions and or variables to the agent and finally return the extended agent.\r\n```\r\nmodule.exports = myAgentModule;\r\n\r\nfunction myAgentModule(newAgent, EveSystem) {\r\n    newAgent.x = 123;\r\n    newAgent.helloWorld = function() {\r\n      console.log('helloWorld!');\r\n    };\r\n    \r\n    newAgent.talkToFrank = function() {\r\n        // this is the \"this\" of the agent\r\n        this.send(\"local://frank\",{method:\"helloFrank\",params:{weather:\"beautiful\", x: this.x}});\r\n    };\r\n\r\n    return newAgent;\r\n}\r\n```\r\nThis agent module gives all agents a ```this.x``` variable, a ```this.helloWorld()``` functions and a ```this.talkToFrank()``` function.\r\n\r\n#### Available Modules:\r\n- **publishSubscribe**\r\nThe publishSubscribe adds functions to for publishing and subscribing to all agents.\r\nAn extra agent called  _publishPortal will be created. This received all published messages. On a subscription, a _topicAgent will be created. The _publishPortal will forward the data to the corresponding _topicAgent which will then perform all the subscribed callbacks. Here is a list of the functions publishSubscribe contains:\r\n\r\n function | arguments | return | description\r\n:--------|:-----|:--------|:-----------\r\npublish | topic, data |  | Publish the data to a topic.\r\nsubscribe | topic, callback | id | Subscribe to a topic. For each message received on the topic, the callback function will be called with one argument containing the published data.\r\nunsubscribe |  topic, [callback] |  | Unsubscribed a callback from a subscribed topic. If no callback is defined, all the callbacks are unsubscribed from this topic.\r\nunsubscribeAll | |  | Unsubscribe from all subscribed topics.\r\n\r\n\r\n---\r\n### Example agents\r\nThere are a few example agents provided. The example below shows a mathAgent, which can do additions. There is also a game of life agent available for benchmarking. To use the examples bundled with EveJS, copy the examples folder to your project root (ie. in the same place as the node_modules containing evejs).\r\n\r\nOther examples:\r\n- Game of Life\r\n- Publish Subscibe\r\n- Math agent\r\n\r\n```\r\nmodule.exports = mathAgent;\r\n\r\nvar mathAgent = {RPCfunctions: {}}; // create the JSON object what will contain all RPC functions. \r\n\r\n// mandatory init function\r\nmathAgent.init = function () {\r\n  // print the creation of this agent to the console.\r\n  console.log(this.agentName + \" added\"); \r\n};\r\n\r\n/**\r\n * Defining the RPC function \"add\". This can be called by other agents.\r\n * @param {object} params       |   {a:Number, b:Number}\r\n * @param {String} [senderId]   |   This is the agent name of the sender. EveJS's transport protocols supply this value.\r\n                                    The HTTP protocol does this with an extra header: \"x-eve-senderurl\".\r\n                                    If this is not the case, senderId == \"unknown\".\r\n */\r\nmathAgent.RPCfunctions.add = function (params, senderId) { \r\n  return params.a + params.b;\r\n};\r\n```\r\n\r\n\r\n---\r\n### Communication with the browser\r\n\r\nIf there is a node.js EveJS instance running with the HTTP transport protocol, javascript on the browser side can be used to send either synchronous or asynchronous JSON-RPC messages. The function below can be used for this.\r\n```\r\n/**\r\n * This function communicates with the agent by an (optionally) asynchronous HTTP POST request.\r\n *\r\n * @param {String} url\r\n * @param {String} method\r\n * @param {Object} params\r\n * @param {Function} callback\r\n */\r\nfunction askAgent(url,method,params,callback, async) {\r\n  if (async === undefined) {\r\n    async = true;\r\n  }\r\n  // create post request\r\n  var POSTrequest = JSON.stringify({\"method\": method, \"params\": params});\r\n\r\n  // create XMLHttpRequest object to send the POST request\r\n  var http = new XMLHttpRequest();\r\n\r\n  // insert the callback function. This is called when the message has been delivered and a response has been received\r\n  http.onreadystatechange = function () {\r\n    if (http.readyState == 4 && http.status == 200) {\r\n      if (callback === undefined || callback === null) {\r\n      }\r\n      else {\r\n        // launch callback function\r\n        callback(JSON.parse(http.responseText));\r\n      }\r\n    }\r\n    else if (http.readyState == 4 && http.status != 200) {\r\n      console.log(\"Make sure that the Node server has started.\");\r\n    }\r\n  };\r\n\r\n  // open an asynchronous POST connection\r\n  http.open(\"POST\", url, async);\r\n  // include header so the receiving code knows its a JSON object\r\n  http.setRequestHeader(\"Content-type\", \"application/json\");\r\n  // send\r\n  http.send(POSTrequest);\r\n}\r\n\r\n// usage example:\r\naskAgent(\r\n    \"http://localhost:3000/agents/mathAgent\",\r\n    \"add\",\r\n    {a:1,b:34},\r\n    function (reply) {console.log(reply.result);},\r\n    true\r\n);\r\n```\r\n\r\n\r\n---\r\n### License\r\n\r\nCopyright (C) 2010-2014 Almende B.V.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n----------\r\n\r\n\r\n> Written with [StackEdit](https://stackedit.io/).",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/AlexDM0/EVE-NodeJS/issues"
  },
  "homepage": "https://github.com/AlexDM0/EVE-NodeJS",
  "_id": "evejs@0.3.3",
  "_from": "evejs@0.3.3"
}
